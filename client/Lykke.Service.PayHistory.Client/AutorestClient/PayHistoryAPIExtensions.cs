// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.PayHistory.AutorestClient
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PayHistoryAPI.
    /// </summary>
    public static partial class PayHistoryAPIExtensions
    {
            /// <summary>
            /// Returns history operations base info.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='merchantId'>
            /// Identifier of the merchant.
            /// </param>
            public static object GetHistory(this IPayHistoryAPI operations, string merchantId = default(string))
            {
                return operations.GetHistoryAsync(merchantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns history operations base info.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='merchantId'>
            /// Identifier of the merchant.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetHistoryAsync(this IPayHistoryAPI operations, string merchantId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHistoryWithHttpMessagesAsync(merchantId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns history operations base info.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='invoiceId'>
            /// Identifier of the invoice.
            /// </param>
            public static object GetHistoryByInvoice(this IPayHistoryAPI operations, string invoiceId = default(string))
            {
                return operations.GetHistoryByInvoiceAsync(invoiceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns history operations base info.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='invoiceId'>
            /// Identifier of the invoice.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetHistoryByInvoiceAsync(this IPayHistoryAPI operations, string invoiceId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHistoryByInvoiceWithHttpMessagesAsync(invoiceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns details of the history operation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='merchantId'>
            /// Identifier of the merchant.
            /// </param>
            /// <param name='id'>
            /// Identifier of the history operation.
            /// </param>
            public static object GetDetails(this IPayHistoryAPI operations, string merchantId = default(string), string id = default(string))
            {
                return operations.GetDetailsAsync(merchantId, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns details of the history operation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='merchantId'>
            /// Identifier of the merchant.
            /// </param>
            /// <param name='id'>
            /// Identifier of the history operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetDetailsAsync(this IPayHistoryAPI operations, string merchantId = default(string), string id = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDetailsWithHttpMessagesAsync(merchantId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set TxHash to the history operation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Identifier of the history operation.
            /// </param>
            /// <param name='txHash'>
            /// TxHash of the history operation.
            /// </param>
            public static ErrorResponse SetTxHash(this IPayHistoryAPI operations, string id = default(string), string txHash = default(string))
            {
                return operations.SetTxHashAsync(id, txHash).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set TxHash to the history operation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Identifier of the history operation.
            /// </param>
            /// <param name='txHash'>
            /// TxHash of the history operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> SetTxHashAsync(this IPayHistoryAPI operations, string id = default(string), string txHash = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetTxHashWithHttpMessagesAsync(id, txHash, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Mark history operation as removed
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Identifier of the history operation.
            /// </param>
            public static ErrorResponse SetRemoved(this IPayHistoryAPI operations, string id = default(string))
            {
                return operations.SetRemovedAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Mark history operation as removed
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Identifier of the history operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> SetRemovedAsync(this IPayHistoryAPI operations, string id = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetRemovedWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IsAliveResponse IsAlive(this IPayHistoryAPI operations)
            {
                return operations.IsAliveAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IsAliveResponse> IsAliveAsync(this IPayHistoryAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsAliveWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
