// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.PayHistory.Client.AutorestClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class HistoryOperationModel
    {
        /// <summary>
        /// Initializes a new instance of the HistoryOperationModel class.
        /// </summary>
        public HistoryOperationModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the HistoryOperationModel class.
        /// </summary>
        /// <param name="type">Possible values include: 'None', 'Recharge',
        /// 'OutgoingInvoicePayment', 'IncomingInvoicePayment',
        /// 'OutgoingExchange', 'IncomingExchange', 'Withdrawal',
        /// 'CashOut'</param>
        public HistoryOperationModel(string merchantId, string employeeEmail, string txHash, string id, HistoryOperationType type, string oppositeMerchantId, System.DateTime createdOn, double amount, string assetId, string desiredAssetId, string invoiceId, string invoiceStatus)
        {
            MerchantId = merchantId;
            EmployeeEmail = employeeEmail;
            TxHash = txHash;
            Id = id;
            Type = type;
            OppositeMerchantId = oppositeMerchantId;
            CreatedOn = createdOn;
            Amount = amount;
            AssetId = assetId;
            DesiredAssetId = desiredAssetId;
            InvoiceId = invoiceId;
            InvoiceStatus = invoiceStatus;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MerchantId")]
        public string MerchantId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EmployeeEmail")]
        public string EmployeeEmail { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "TxHash")]
        public string TxHash { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'None', 'Recharge',
        /// 'OutgoingInvoicePayment', 'IncomingInvoicePayment',
        /// 'OutgoingExchange', 'IncomingExchange', 'Withdrawal', 'CashOut'
        /// </summary>
        [JsonProperty(PropertyName = "Type")]
        public HistoryOperationType Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "OppositeMerchantId")]
        public string OppositeMerchantId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CreatedOn")]
        public System.DateTime CreatedOn { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Amount")]
        public double Amount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "AssetId")]
        public string AssetId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DesiredAssetId")]
        public string DesiredAssetId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "InvoiceId")]
        public string InvoiceId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "InvoiceStatus")]
        public string InvoiceStatus { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (MerchantId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "MerchantId");
            }
            if (EmployeeEmail == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "EmployeeEmail");
            }
            if (TxHash == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TxHash");
            }
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
            if (OppositeMerchantId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "OppositeMerchantId");
            }
            if (AssetId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AssetId");
            }
            if (DesiredAssetId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DesiredAssetId");
            }
            if (InvoiceId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "InvoiceId");
            }
            if (InvoiceStatus == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "InvoiceStatus");
            }
        }
    }
}
